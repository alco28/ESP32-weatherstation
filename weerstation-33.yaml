#  ⬇ Config your entity names here:  ⬇ # 

substitutions:
  device_description: Weerstation zelfbouw op ESP32 platform.
  friendly_name:  Weerstation33
  devicename: weerstation-33 
  
# for sensors
  sampling_period: 5s
  samples: '5'
  decimals: '2'

esphome:
  name: $devicename
  comment: ${device_description}
  on_boot:
    then:
    #  - light.turn_on: status_led
      - script.execute: consider_deep_sleep

deep_sleep:
  id: deep_sleep_control
  sleep_duration: 90s
 # run_duration: 60s
 # touch_wakeup: 

esp32:
  board: lolin32_lite
  framework:
    type: arduino 

# Enable logging
logger:
  level: INFO 
#improv_serial:
captive_portal:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .lan
  
  #powersaving options:
  fast_connect: true
  power_save_mode: HIGH #LIGHT = default for ESP32
  

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: “${devicename} Fallback AP"
    password: !secret fallback_ap_password






# ⬇ Enable Home Assistant API ⬇ 
ota:
 password: !secret ota_password
 safe_mode: true  #go to safe_mode if update fails
 reboot_timeout: 5min
 num_attempts: 5

api:
# password: !secret api_password
 encryption:
  key:  !secret api_key_password

# ⬇ Enable webinterface ⬇ 
web_server:
  port: 80
  include_internal: true

# dashboard_import:
#   package_import_url: github://esphome/bluetooth-proxies/esp32-generic.yaml@main


# esp32_ble_tracker:
#   scan_parameters:
#     interval: 5000ms
#     window: 3100ms
#     active: true


  # on_ble_advertise:
  #  # - mac_address: 11:22:33:44:55:66
  #     then:
  #       - lambda: |-
  #           ESP_LOGD("ble_adv", "New BLE device");
  #           ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
  #           ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
  #           ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
  #           for (auto uuid : x.get_service_uuids()) {
  #               ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
  #           }
  #           ESP_LOGD("ble_adv", "  Advertised service data:");
  #           for (auto data : x.get_service_datas()) {
  #               ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
  #           }
  #           ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
  #           for (auto data : x.get_manufacturer_datas()) {
  #               ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
  #           }

# bluetooth_proxy:
#   active: true



#--------------------------- sensors --------------------------#
sensor:
  - platform: adc
    id: solar_plant_batt_voltage 
    pin: GPIO32
    attenuation: auto
    name: ${friendly_name} Battery Voltage
    device_class: voltage
    update_interval: 1s
    accuracy_decimals: 2
    filters:
      - filter_out: nan
      - calibrate_linear:
          # Map 0.0 (from sensor) to 0.0 (true value)
          - 1.9 -> 3.2
          - 2.5 -> 4.2      
    #use moving median to smooth spikes
      - median:
          window_size: 10
          send_every: 15
          send_first_at: 5
      - or:
        - delta: 0.05 #Only send values to HA if they change 
        - throttle_average: 60s #Limit values sent to Ha

#Convert the Voltage to a battery  level (%) https://www.mischianti.org/2019/06/15/voltage-divider-calculator-and-application/
  - platform: copy
    source_id: solar_plant_batt_voltage
    id: solar_plant_batt_level
    icon: "mdi:battery"
    name: ${friendly_name} Battery Level
    unit_of_measurement: '%'
    device_class: battery
    accuracy_decimals: 1
    filters:
      - filter_out: nan
      - calibrate_polynomial: 
        #calibrate_linear:
      # Map from voltage to Battery level
         degree: 2
         datapoints:
          - 3.2 -> 0
          - 3.5 -> 50
          - 3.9 -> 90
          - 4.2 -> 100

      #Handle/cap boundaries
      - lambda: |
          if (x < 0) return 0; 
          else if (x > 100) return 100;
          else return (x);
      - or:
        - delta: 0.05 #Only send values to HA if they change 
        - throttle_average: 60s #Limit values sent to Ha


# DHT22
# Geel = data
# Groen = plus 3.3v
# bruin = grond 3.3v




#---------------------------------------------------Weather station---------------------------------------------------------------------------------------------------------------#   


  - platform: adc
    pin: GPIO33
    name: "Soil Surface Moisture Voltage"
    id: soil_surface_moisture_voltage
    update_interval: ${sampling_period}
    state_class: measurement
    device_class: voltage
    accuracy_decimals: 3
    attenuation: auto
    filters:
    - filter_out: nan 
    - sliding_window_moving_average:
        window_size: ${samples}
        send_every: ${samples}
        send_first_at: ${samples}

  - platform: template
    name: "Soil Surface Moisture"
    unit_of_measurement: "%"
    device_class: moisture
    state_class: measurement
    accuracy_decimals: ${decimals}
    icon: mdi:water-percent
    lambda: |-
      return id(soil_surface_moisture_voltage).state;
    filters:
    - filter_out: nan  
    - calibrate_linear: # calibrate sensor! in dry air and wet soil or water
        - 2.48 -> 0.00
        - 0.95 -> 100.00
    - lambda: |
        if (x < 0) return 0; 
        else if (x > 100) return 100;
        else return (x);


# Will only pick up a value if this device is configured in Home Assistant > Integrations
# If the device isn't configured, or Home Assistant is offline, it'll default to false
binary_sensor:
  - platform: homeassistant
    id: prevent_deep_sleep
    entity_id: input_boolean.prevent_deep_sleep
    on_press:
       then:
          - deep_sleep.prevent: deep_sleep_control
script:
  - id: consider_deep_sleep
    mode: queued
    then:
      - delay: 10s
      - if:
          condition:
            binary_sensor.is_on: prevent_deep_sleep
          then:
            - logger.log: 'Skipping sleep, per prevent_deep_sleep'
            - switch.turn_on: onboardLED
          else:
            - deep_sleep.enter: deep_sleep_control
            - switch.turn_off: onboardLED
      - script.execute: consider_deep_sleep



#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------#   

# text_sensor:
#   - platform: ble_scanner
#     name: "BLE Devices Scanner"

button:
- platform: safe_mode
  name: Safe Mode Boot
  entity_category: diagnostic
  internal: true

switch:
  - platform: restart
    name: "${devicename} restart"   
    entity_category: config 
    internal: true

  - platform: gpio
    name: "onboardLED"
    id: onboardLED
    pin:
      number: GPIO22
      inverted: True
      mode: OUTPUT
    restore_mode: ALWAYS_OFF
    internal: true

